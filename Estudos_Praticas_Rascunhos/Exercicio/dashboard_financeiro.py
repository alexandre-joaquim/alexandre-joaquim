# Projeto: Dashboard Profissional de An√°lise de Dados com Streamlit

import streamlit as st
import pandas as pd
import requests
import plotly.express as px 
import sqlite3
from datetime import datetime
import base64
import time

# ------------------------ CONFIGURA√á√ïES DA P√ÅGINA ------------------------
st.set_page_config(page_title="An√°lise de Dados - Mercado Financeiro", layout="wide")
st.title("üìä Dashboard Profissional - Mercado Financeiro em Tempo Real")

# ------------------------ BANCO DE DADOS LOCAL (SQLite) ------------------
conn = sqlite3.connect("usuarios.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS usuarios (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        nome TEXT NOT NULL,
        email TEXT NOT NULL,
        senha TEXT NOT NULL,
        data_cadastro TEXT NOT NULL
    )
""")
conn.commit()

# ------------------------ FUN√á√ïES DE CADASTRO E LOGIN ----------------------------
def cadastrar_usuario(nome, email, senha):
    data_cadastro = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO usuarios (nome, email, senha, data_cadastro) VALUES (?, ?, ?, ?)",
                   (nome, email, senha, data_cadastro))
    conn.commit()
    st.success("Usu√°rio cadastrado com sucesso!")

def autenticar_usuario(email, senha):
    cursor.execute("SELECT * FROM usuarios WHERE email = ? AND senha = ?", (email, senha))
    return cursor.fetchone()

# ------------------------ LOGIN ------------------------------------------
if "usuario_autenticado" not in st.session_state:
    st.session_state.usuario_autenticado = False
    st.session_state.usuario_nome = ""

if not st.session_state.usuario_autenticado:
    st.sidebar.subheader("Login")
    email = st.sidebar.text_input("Email")
    senha = st.sidebar.text_input("Senha", type="password")
    botao_login = st.sidebar.button("Entrar")
    if email and senha and botao_login:
        user = autenticar_usuario(email, senha)
        if user:
            st.session_state.usuario_autenticado = True
            st.session_state.usuario_nome = user[1]
            st.rerun()
        else:
            st.sidebar.error("Credenciais inv√°lidas.")
    st.stop()

# ------------------------ MENU PRINCIPAL ---------------------------
st.sidebar.success(f"Logado como: {st.session_state.usuario_nome}")
opcoes_paginas = ["Cadastro de Usu√°rios", "Visualizar Usu√°rios", "Dashboard - Criptomoedas", "Cota√ß√£o de Moedas", "Sobre o Projeto"]
pagina = st.sidebar.radio("Navega√ß√£o", opcoes_paginas)

# ------------------------ CADASTRO DE USU√ÅRIOS ---------------------------
if pagina == "Cadastro de Usu√°rios":
    st.subheader("Cadastrar Novo Usu√°rio")
    nome = st.text_input("Nome")
    email = st.text_input("Email")
    senha = st.text_input("Senha", type="password")
    if st.button("Cadastrar"):
        if nome and email and senha:
            cadastrar_usuario(nome, email, senha)
        else:
            st.warning("Por favor, preencha todos os campos.")

# ------------------------ VISUALIZA√á√ÉO DE USU√ÅRIOS ----------------------
elif pagina == "Visualizar Usu√°rios":
    st.subheader("Usu√°rios Cadastrados")
    df_usuarios = pd.read_sql("SELECT id, nome, email, data_cadastro FROM usuarios", conn)
    st.dataframe(df_usuarios)

# ------------------------ DASHBOARD COM API DE MERCADO ------------------
elif pagina == "Dashboard - Criptomoedas":
    st.subheader("An√°lise de Criptomoedas em Tempo Real")

    moedas = ["bitcoin", "ethereum", "cardano", "solana", "dogecoin"]
    moeda = st.selectbox("Escolha a Criptomoeda", moedas)

    url = f"https://api.coingecko.com/api/v3/coins/{moeda}/market_chart?vs_currency=usd&days=365"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json()
        prices = data.get("prices", [])

        df = pd.DataFrame(prices, columns=["Timestamp", "Pre√ßo"])
        df["Data"] = pd.to_datetime(df["Timestamp"], unit="ms")
        df = df.drop("Timestamp", axis=1)
        df = df[["Data", "Pre√ßo"]]

        df["M√©dia M√≥vel 7 dias"] = df["Pre√ßo"].rolling(window=7).mean()

        st.metric("Pre√ßo Atual (USD)", f"${df['Pre√ßo'].iloc[-1]:,.2f}")
        st.plotly_chart(px.line(df, x="Data", y=["Pre√ßo", "M√©dia M√≥vel 7 dias"],
                                title=f"Varia√ß√£o de Pre√ßo - {moeda.upper()}"))

        with st.expander("Ver dados brutos"):
            st.dataframe(df)

        # Exporta√ß√£o para Excel
        csv = df.to_csv(index=False).encode('utf-8')
        b64 = base64.b64encode(csv).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="{moeda}_precos.csv">üì• Baixar Dados em CSV</a>'
        st.markdown(href, unsafe_allow_html=True)

    else:
        st.error("Erro ao buscar dados da API CoinGecko.")

# ------------------------ P√ÅGINA DE COTA√á√ÉO DE MOEDAS ------------------
elif pagina == "Cota√ß√£o de Moedas":
    st.subheader("Cota√ß√£o de Moedas (C√¢mbio) - Fonte: AwesomeAPI")

    moedas = ["USD", "EUR", "GBP", "ARS", "BTC"]
    base = st.selectbox("Moeda base", moedas)

    url = f"https://economia.awesomeapi.com.br/json/last/{base}-BRL"
    resposta = requests.get(url)

    if resposta.status_code == 200:
        try:
            dados = resposta.json()
            par = f"{base}BRL"
            if par in dados:
                info = dados[par]
                st.metric(label=f"üí± {base}/BRL", value=f"R$ {float(info['bid']):.2f}")
                st.write(f"""
                - üïí √öltima atualiza√ß√£o: {info['create_date']}
                - üìà Alta do dia: R$ {float(info['high']):.2f}
                - üìâ Baixa do dia: R$ {float(info['low']):.2f}
                - üìä Varia√ß√£o: {float(info['pctChange']):.2f}%
                """)
                df = pd.DataFrame({
                    "Indicador": ["Alta", "Baixa", "Varia√ß√£o", "Compra", "Venda"],
                    "Valor (R$)": [
                        float(info["high"]),
                        float(info["low"]),
                        float(info["pctChange"]),
                        float(info["bid"]),
                        float(info["ask"])
                    ]
                })
                st.dataframe(df)
            else:
                st.warning("Par de moedas n√£o encontrado.")
        except Exception as e:
            st.error(f"Erro ao processar resposta da API: {e}")
    else:
        st.error("Erro ao buscar dados da API de c√¢mbio (AwesomeAPI).")

# ------------------------ SOBRE O PROJETO -------------------------------
elif pagina == "Sobre o Projeto":
    st.markdown("""
    ### Objetivo
    Este projeto foi desenvolvido com foco em **an√°lise de dados aplicada ao mercado financeiro** utilizando as melhores pr√°ticas e tecnologias:

    - Interface interativa com Streamlit
    - Cadastro e gest√£o de usu√°rios com autentica√ß√£o
    - Integra√ß√£o com API p√∫blica em tempo real (CoinGecko - Criptomoedas)
    - Visualiza√ß√µes din√¢micas com Plotly
    - Exporta√ß√£o de relat√≥rios
    - An√°lise de tend√™ncias com m√©dias m√≥veis

    ### Destaques Profissionais
    - Aplica√ß√£o pr√°tica de engenharia e an√°lise de dados
    - Projeto orientado a dados de alta relev√¢ncia no mercado
    - Arquitetura modular e expans√≠vel
    - Ideal para apresenta√ß√µes profissionais e portf√≥lio

    ### Expans√µes Inclu√≠das
    - Login com autentica√ß√£o de usu√°rios
    - Exporta√ß√£o de relat√≥rios em CSV
    - C√°lculo de m√©dia m√≥vel (an√°lise de tend√™ncia)
    - Cota√ß√£o de moedas (API ExchangeRate)
    - Acompanhamento de a√ß√µes (Yahoo Finance API)

    ### Expans√µes Futuras
    - Alertas autom√°ticos por e-mail
    - Upload e an√°lise de dados personalizados pelo usu√°rio
    """)