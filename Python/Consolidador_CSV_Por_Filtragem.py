import os
import pandas as pd
import chardet
import re

# === FUN√á√ÉO: Detecta encoding de forma autom√°tica ===
def detectar_encoding(caminho_arquivo, tamanho_amostra=10000):
    with open(caminho_arquivo, 'rb') as f:
        resultado = chardet.detect(f.read(tamanho_amostra))
    return resultado['encoding']

# === FUN√á√ÉO: Detecta separador adequado por tentativa ===
def detectar_separador(caminho_arquivo, encoding, separadores=[';', ',', '|', '\t']):
    for sep in separadores:
        try:
            df_teste = pd.read_csv(caminho_arquivo, encoding=encoding, sep=sep, nrows=5)
            if df_teste.shape[1] > 1:
                return sep
        except Exception:
            continue
    return ';'  # Padr√£o caso n√£o detecte

# === FUN√á√ÉO: Limpa caracteres n√£o pertencentes ao alfabeto brasileiro ===
def limpar_texto(texto):
    texto = re.sub(r'[\u200B\uFFFD\uFEFF]', '', str(texto))  # Invis√≠veis e substitui√ß√£o ÔøΩ
    texto = re.sub(r'[^a-zA-Z0-9√Ä-√ø\s.,;:/()\-@]', '', texto)
    return texto.strip()

# === CONFIGURA√á√ïES ===
caminho_pasta = r'C:\Users\ale\Desktop\Python\Arquivo_Procon'
coluna_filtro = 'Nome Fantasia'
valor_desejado = 'Amazon.com.br'
caminho_saida = os.path.join(caminho_pasta, (f'1-{valor_desejado}.csv'))

dados_filtrados = []

# === PROCESSAMENTO DOS ARQUIVOS ===
for arquivo in os.listdir(caminho_pasta):
    if arquivo.endswith('.csv'):
        caminho_arquivo = os.path.join(caminho_pasta, arquivo)
        try:
            print(f"üìÑ Lendo {arquivo}...")
            encoding = detectar_encoding(caminho_arquivo)
            print(f"   ‚Üí Encoding detectado: {encoding}")

            sep = detectar_separador(caminho_arquivo, encoding)
            print(f"   ‚Üí Separador identificado: '{sep}'")

            df = pd.read_csv(caminho_arquivo, encoding=encoding, sep=sep, dtype=str, on_bad_lines='skip')

            # Remove colunas duplicadas (mesmo nome)
            df = df.loc[:, ~df.columns.duplicated()]

            # LIMPEZA DOS NOMES DAS COLUNAS
            df.columns = [limpar_texto(col) for col in df.columns]

            # LIMPEZA DO CONTE√öDO DAS COLUNAS (apenas texto)
            for col in df.select_dtypes(include='object').columns:
                df[col] = df[col].apply(limpar_texto)

            # FILTRAGEM PELO VALOR DESEJADO
            if coluna_filtro in df.columns:
                df_filtrado = df[df[coluna_filtro] == valor_desejado].copy()
                df_filtrado['Arquivo_Origem'] = arquivo
                dados_filtrados.append(df_filtrado)
            else:
                print(f"‚ö†Ô∏è  Coluna '{coluna_filtro}' n√£o encontrada em: {arquivo}")
                print("    Colunas dispon√≠veis:", df.columns.tolist())

        except Exception as e:
            print(f"‚ùå Erro ao processar {arquivo}: {e}")

# === CONSOLIDA√á√ÉO ===
if dados_filtrados:
    df_consolidado = pd.concat(dados_filtrados, ignore_index=True)

    # Substitui valores NaN e strings 'nan' por string vazia
    df_consolidado = df_consolidado.fillna('').replace('nan', '', regex=False)

    # Exporta para CSV for√ßando string vazia nas c√©lulas faltantes
    df_consolidado.to_csv(
        caminho_saida,
        encoding='utf-8-sig',
        index=False,
        sep=';',
        na_rep=''
    )

    print(f"\n‚úÖ Consolida√ß√£o conclu√≠da!\n   Arquivo salvo em: {caminho_saida}")
else:
    print("\n‚ùå Nenhum dado v√°lido foi encontrado para consolidar.")







'''

# === COMANDOS DA BIBLIOTECA os ===
os.listdir = lista arquivos de uma pasta
os.path.join = junta partes de um caminho (ex: pasta + nome do arquivo)

# === COMANDOS DA BIBLIOTECA pandas (pd) ===
pd.read_csv = l√™ arquivo CSV e cria tabela (DataFrame)
df.shape = mostra formato da tabela (linhas, colunas)
df.columns = lista os nomes das colunas
df.loc[:, ~df.columns.duplicated()] = remove colunas com nomes duplicados
df.select_dtypes(include='object') = seleciona colunas do tipo texto
df[col].apply(func) = aplica uma fun√ß√£o a cada c√©lula da coluna
pd.concat = junta v√°rias tabelas em uma s√≥
df.fillna('') = substitui valores vazios por string vazia
df.replace('nan', '') = substitui texto "nan" por string vazia
df.to_csv = salva a tabela em um arquivo CSV

# === COMANDOS DA BIBLIOTECA chardet ===
chardet.detect = detecta a codifica√ß√£o de caracteres de um arquivo

# === COMANDOS DA BIBLIOTECA re (express√µes regulares) ===
re.sub = substitui padr√µes de texto por outro valor

# === COMANDOS NATIVOS DO PYTHON ===
import = importa biblioteca
def = define uma fun√ß√£o
with open = abre arquivo com controle autom√°tico de fechamento
read = l√™ conte√∫do de arquivo
return = retorna um valor de uma fun√ß√£o
for = la√ßo de repeti√ß√£o
if = condi√ß√£o (se)
else = sen√£o
in = verifica se um item existe em outro
try / except = tenta executar / captura e trata erros
print = exibe mensagem no terminal
append = adiciona item a uma lista
copy = cria uma c√≥pia de um objeto
strip = remove espa√ßos no in√≠cio e no fim da string
str = transforma um valor em texto
endswith = verifica se uma string termina com determinado sufixo

'''